Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit 
signed integer range: [−231,  231 − 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

public class Solution {
    
    public int Reverse(int x) {
        
        if(x > Int32.MaxValue || x < Int32.MinValue) return 0;   
        
        long result = 0;
        int pop = 0;
        
        while(x/10 != 0){
            
            int remainder = x%10;
        
            result = result*10 + remainder;
            
            x /= 10;
        }
        if(x%10 != 0){
            result = result*10 + x%10;
        }
        if(result > Int32.MaxValue || result < Int32.MinValue) return 0;     
        
        return (int)result;
    }
}
