Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
/*
二分木の高さを求める
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
说明: 叶子节点是指没有子节点的节点。

复习关于递归 引用https://blog.csdn.net/qq_34773981/article/details/79225588
https://www.cnblogs.com/lukely/p/9030473.html
————————————————————————————————————————————————————
所谓递归，就是包含递推和回归两个自然过程，
一方面要由外到里地深入，一方面又要由里到外地回到原点，
递归的元素总共有三类：

初始值
结束条件
算法
————————————————————————————————————————————————————
递归算法实际上就是一个方法自己调用自己.一个递归技术的方法将会直接或间接的调用自己
递归算法需要注意跳出条件，否则容易栈溢出.
递归结构包括两个部分:
定义递归头:这个递归头将解决什么时候停止调用自己的问题，如果没有递归头，将会导致方法不停地调用自己。
递归体：递归体，用于解决什么时候调用自己的问题。
递归算法需要问题解析：
为什么不推荐使用递归？
因为递归使用不好，容易造成死循环，导致程序不正常。
本身递归算法计算效率也不高，所以不推荐使用。
为什么递归算法效率不高呢？
这点还没有来得及详细研究，但是因为递归每次都会调用自己，而自己的局部变量每次都会更新，这就会在栈空间内推荐不断地开辟新的空间。不停滴开辟空间，也是一项耗时费力的工作，而且这也是递归算法不安全，容易造成栈溢出的原因。
递归算法有哪些优点？
结构清晰
1：首先是设定好递归的出口，
2：接着就是递归体调用自己。
所以递归算法非常的简单清晰。
递归的缺点：缺点就是上面说的那些，效率低，容易造成死循环等。



*/
public class Solution {
    public int MaxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }else{
            int leftHeight= MaxDepth(root.left);
            int rightHeight = MaxDepth(root.right);
            return Math.Max(leftHeight, rightHeight) + 1;
        }
    }
}
