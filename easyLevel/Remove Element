Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
 /*
    难度在于操作必须是原位的即in-place
    需要两个指针，一个正常来走，判断值是否与给定的val相等，一个用来更改值
    两个指针针对一个数组
    */

public class Solution {
    public int RemoveElement(int[] nums, int val) {
        
        //the best method
        int i = 0;
        int n = nums.Length;
        while (i < n) {
            /*下面代码可以看出如果数组内部的值和val相等的话，就让最后一个顶替他，此时i不自增，并拿n来记录长度 
            顶替它之后，再次判断顶替后的是否和val相等，相等的话，就让倒数第二个来顶替在判断。。。
            如果发现和val不相等，那么什么都不做，继续下个值得检查,这样的话就达到了num前面的都是不等于val的值，
            一相等，就从总长度减1的n就是最终返回的长度*/
            if (nums[i] == val) {
                nums[i] = nums[n - 1];
                // reduce array size by one
                n--;
            } else {
                i++;
            }
        }
        return n;
        
        /*
         int numVals = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == val) {
                numVals++;
            } else {
                nums[i-numVals] = nums[i];
            }
        }
        return nums.length - numVals;*/
        
        /*
        int i = 0;
        for (int j = 0; j < nums.Length; j++) {
            if (nums[j] != val) {
                nums[i] = nums[j];
                i++;
            }
        }
        return i;*/
    }
}



