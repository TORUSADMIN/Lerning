Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

public class Solution {
    public int MaxSubArray(int[] nums) {
    /*
    最大子数组
    */    
        //method 1
        /*
        int curSum = 0;
        int res = Int32.MinValue;
        //前面的子数组的和与当前值做比较，取大的，如果是和大就保留子数组，如果当前值大，和就成了新轮到的值
        
        foreach(int num in nums){
            curSum = Math.Max(curSum+num, num);
            res = Math.Max(res, curSum);
        }
        return res;*/
        
        //method 2 divide and conquer approach 
        /*
        divide-and-conquer 分以下4步进行：
        攻克： 如果问题足够小，可以直接给出答案
        分解： 把问题分解成同样性质的几个子问题
        递归：递归调用本算法来解决子问题
        合并：把解决好的子问题合在一起，组成原有问题的答案
        
        这个分治法的思想就类似于二分搜索法，我们需要把数组一分为二，分别找出左边和右边的最大子数组之和，然后还要从中间开始向左右分别扫描，求出的最大值分别和左右两边得出的最大值相比较取最大的那一个
        */
        if (nums.Length == 0) return 0;
        return helper(nums, 0, nums.Length - 1);
    }
    public int helper(int[] nums, int left, int right) {
        
        if (left >= right) return nums[left];
        
        int mid = left + (right - left) / 2;
        
        int lmax = helper(nums, left, mid - 1);//left max
        int rmax = helper(nums, mid + 1, right);//right max
        
        int mmax = nums[mid], t = mmax;// middle value
        //form middle to left and right
        for (int i = mid - 1; i >= left; --i) {
            t += nums[i];
            mmax = Math.Max(mmax, t);
        }
        
        t = mmax;
        
        for (int i = mid + 1; i <= right; ++i) {
            t += nums[i];
            mmax = Math.Max(mmax, t);
        }
        
        return Math.Max(mmax, Math.Max(lmax, rmax));
    }
}
