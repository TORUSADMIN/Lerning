Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

/*
目标：寻找最长对称子字符串
方法一：对称的字符串特征是该字符串等于reverse该字符串
       所以，列出该字符串所有可能的子字符串，对每一个验证是否和他的反向相同，如果相同判断与上一次的长度谁大，取大的。
      
      这样会超时，时间复杂度是O(n^3)
      i=0时 执行了n-1次
      i=1时 执行了n-2次
      i=2时 执行了n-3次...
      i=n-2时 执行了1次
      
      number of substrings:
      n-1 + n-2 + n-3 + ... + 2 + 1 = (1+n-1)(n-1)/2 = n(n-1)/2 个子字符串
      每一个都要验证一回即验证是否为回文子串，虽然没有显示出来但是subStr == reverseStr判断内部依旧是for循环
      所以复杂度到了O(n^3) 
      
      为了必须避免不必要的计算unnecessary computation
方法二：中心扩散法 对称枚举法
用for循环遍历字符串的每一个字符，每找到一个字符就以此为中心，往两边拓展，看左右字符串是否相等。
但是回文有两种类型，一种为奇数，一种偶数，如下： 
奇数回文：aba 
偶数回文：abba 
所以处理时，需考虑此2种情况。
算法理解起来很简单，关键是思路。
算法时间效率为O(n^2)
--------------------- 
作者：kaige2111 
来源：CSDN 
原文：https://blog.csdn.net/kaige2111/article/details/79551212?utm_source=copy 
版权声明：本文为博主原创文章，转载请附上博文链接！
      
*/

public class Solution {
    public string LongestPalindrome(string s) {
        //method two
        int maxLength = 0;
        int startPos = 0;
        int endPos = 0;
        
        for(int i=0; i<s.Length; i++){
        
            int m = i;
            int n = i;
            
            //abaの場合
            while(m>=1 && n+1 <= s.Length-1){
                if(s[m-1] == s[n+1]){
                    m--;
                    n++;
                }else{
                    break;
                }
            }
            if(maxLength < n-m+1){
                startPos = m;
                endPos = n;
                maxLength = n-m+1;
            }
            
            //abbaの場合
            m = i;
            n = i+1;
            
            while(m >= 0 && n < s.Length){
                if(s[m] == s[n]){
                    m--;
                    n++;
                }else{
                    break;
                }
            }
            if(m != i && maxLength < (n-1-(m+1)+1)){
                Console.WriteLine("m:"+m);
                Console.WriteLine("n:"+n);
                startPos = m+1;
                endPos = n-1;
                maxLength = endPos-startPos+1; 
            }
            maxLength = endPos-startPos+1;
        }
        return s.Substring(startPos, maxLength);
        
        /* method one is failed
        if(s.Length == 1) return s;
        if(s.Length > 1000 || s.Length == 0) return "";
        
        int idx = 0;
        int maxLength = 0; 
        string startStr = "";
        string result = "";
        
        while(idx < s.Length){
            startStr = s.Substring(idx, 1);
            int count = 1;
            while(count <= s.Length-(idx+1)){
                string subStr = startStr + s.Substring(idx+1, count);
                char[] tmp = subStr.ToCharArray();
                Array.Reverse(tmp);
                string reverseStr = new String(tmp);
                if(subStr == reverseStr){
                    if(subStr.Length >= maxLength){
                        result = subStr;
                        maxLength = subStr.Length;
                    }
                }
                count++;
            }   
            idx++;
        }
        //もし対称substringが存在されないなら、一個だけ取る
        if(result == "") return s.Substring(0, 1);
        return result;
        */
        
        /* method one is failed
        if(s.Length == 1 || s == "") return s;
        char[] allStr = s.ToCharArray();
        int maxLength = 0; 
        string result = "";
        
        for(int i=0; i<allStr.Length; i++){
            string subStr = allStr[i].ToString();
            for(int j=i+1; j<allStr.Length; j++){
                string behindStr = allStr[j].ToString();
                subStr = subStr + behindStr;
                char[] tmp = subStr.ToCharArray();
                Array.Reverse(tmp);
                string reverseStr = new String(tmp);
                 if(subStr == reverseStr){
                    if(subStr.Length >= maxLength){
                        result = subStr;
                        maxLength = subStr.Length;
                    }
                }
            }
        }
        if(result == "") return s.Substring(0, 1);
        return result;*/
        
    }
}
