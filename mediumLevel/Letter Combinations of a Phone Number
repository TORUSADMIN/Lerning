Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.


public class Solution {
    public IList<string> LetterCombinations(string digits) {
        
        if(digits == "") return new List<string>();
        IList<string> result = new List<string> ();
        var numberRel = new Dictionary<string, string[]>();
        numberRel.Add("2", new string[]{"a","b","c"});
        numberRel.Add("3", new string[]{"d","e","f"});
        numberRel.Add("4", new string[]{"g","h","i"});
        numberRel.Add("5", new string[]{"j","k","l"});
        numberRel.Add("6", new string[]{"m","n","o"});
        numberRel.Add("7", new string[]{"p","q","r","s"});
        numberRel.Add("8", new string[]{"t","u","v"});
        numberRel.Add("9", new string[]{"w","x","y","z"});
        
        string eachEle = "";
        
        Helper(result, 0, digits, numberRel, eachEle, digits.Length);
        return result;    
    }
    
    public void Helper(IList<string> result, 
                  int startIndex, 
                  string digits, 
                  Dictionary<string, string[]> numberRel, 
                  string eachEle,
                  int eachEleLen){
        
        if(eachEle.Length == eachEleLen){
            result.Add(eachEle);
            return;
        }
        for(int i=startIndex; i<digits.Length; ++i){
            string eachLetter = digits.Substring(i, 1);
            if(numberRel.ContainsKey(eachLetter)){
                string[] eachBox = numberRel[eachLetter];
                foreach(string le in eachBox){
                    eachEle += le;
                    Helper(result, i+1, digits, numberRel, eachEle, eachEleLen);
                    eachEle = eachEle.Remove(eachEle.Length - 1, 1);
                }
            }else{
                continue;
            }
        }
    }
}
