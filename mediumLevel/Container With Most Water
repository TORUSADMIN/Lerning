Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

 
The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49

/*
最终目的就是让矩形面积max
矩形面积=height*width

method one : 所有的长方形罗列出来，找出面积最大的
             复杂度到到了O(n^2) 不推荐这个方法

method two : 分左右两个指针，不断调整移动，这种在数组或者字符串内部求最大小，求最长短的经常分开左右两个指针来操作
                cf mediumLevel Longest Palindromic Substring
            这回左右指针从最左和最右不断向中间靠近 复杂度O(n)
            具体看图
*/

public class Solution {
    public int MaxArea(int[] height) {
        
        //method two
        int maxArea = 0;
        int leftIdx = 0;
        int rightIdx = height.Length-1;
        /*
        看到while循环两个边界都在不断变化
        右边界高左指针移动 因为右边比左边的高，要保留(最终取的矩形高一定小于等于这个高的)，左边移动
                         因为高度取小的，所以当出现新的高度时，要定住它，另一边的指针移动
                                                            如果不定住它，接着移动会漏掉可能大的面积
        左边界高右指针移动
        */
        while(leftIdx < rightIdx){
            
            int width = rightIdx - leftIdx;
            int high = Math.Min(height[rightIdx], height[leftIdx]);
            maxArea = Math.Max(width*high, maxArea);
            if(height[leftIdx] < height[rightIdx]) leftIdx++;
            else rightIdx--;
            
        }
        return maxArea;
        
        
        //method one
        /*
        int maxArea = 0;
        
        for(int i=0; i<height.Length; i++){
            for(int j=i+1; j<height.Length; j++){
                int width = j-i;
                int high = Math.Min(height[i], height[j]);
                maxArea = Math.Max(width*high, maxArea);
            }
        }
        return maxArea;*/
    }
}
