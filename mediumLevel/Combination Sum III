Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

/*
问题分析
给了 1，小容器定长k  2, 目标数n也就是小容器里面的所有要素的和
规定 小容器内的要素不能重复 要素只能使用1至9
*/
public class Solution {
    public IList<IList<int>> CombinationSum3(int k, int n) {
        int[] numBox = new []{1,2,3,4,5,6,7,8,9};
        IList<IList<int>> result = new List<IList<int>>();
        List<int> eachRow = new List<int>();
        Helper(result, eachRow, numBox, 0, k, n);
        return result;
    }
    public void Helper(IList<IList<int>> result, 
                       List<int> eachRow, 
                       int[] numBox,
                       int startIndex,
                       int k,
                       int target){
        if(target == 0 && eachRow.Count == k){
            result.Add(new List<int>(eachRow));
            return; 
        }
        for(int i=startIndex; i<numBox.Length; ++i){
            eachRow.Add(numBox[i]);
            Helper(result, eachRow, numBox, i+1, k, target-numBox[i]);
            eachRow.RemoveAt(eachRow.Count - 1);
        }
    }
}
