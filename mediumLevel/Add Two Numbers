You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
/*
就是建立一个新链表，然后把输入的两个链表从头往后撸，
每两个相加，添加一个新节点到新链表后面，
就是要处理下进位问题。
还有就是最高位的进位问题要最后特殊处理一下。
进位的时候逢十向后进一位，而不是向前进一位

————————————————————————————————————————————————————————
关于对象赋值
参照https://blog.csdn.net/yz930618/article/details/76278997/
*/
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);//dummy头部节点无视
        ListNode p = l1, q = l2, curr = dummyHead;
        int carry = 0;
        while (p != null || q != null) {
            int x = (p != null) ? p.val : 0;
            int y = (q != null) ? q.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;//添加一个新节点到新链表后面
            if (p != null) p = p.next;
            if (q != null) q = q.next;
        }
        /*最后的节点即最高位如果超过10的情况，再往前进一位*/
        if (carry > 0) {
            curr.next = new ListNode(carry);
        }
        //dummyHead头节点是0，所以返回0之后的所有节点
        return dummyHead.next;
    }
}
