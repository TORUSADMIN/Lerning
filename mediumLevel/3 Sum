Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

/*　cf. https://www.cnblogs.com/grandyang/p/4481576.html
这道题让我们求三数之和，比之前那道Two Sum要复杂一些，
博主考虑过先fix一个数，然后另外两个数使用Two Sum那种HashMap的解法，
但是会有重复结果出现，就算使用set来去除重复也不行，会TLE，
看来此题并不是考我们Two Sum的解法。
那么我们来分析一下这道题的特点，要我们找出三个数且和为0，
那么除了三个数全是0的情况之外，肯定会有负数和正数，我们还是要先fix一个数，
然后去找另外两个数，我们只要找到两个数且和为第一个fix数的相反数就行了，
既然另外两个数不能使用Two Sum的那种解法来找，如果能更有效的定位呢？
我们肯定不希望遍历所有两个数的组合吧，所以如果数组是有序的，
那么我们就可以用双指针以线性时间复杂度来遍历所有满足题意的两个数组合。
***********************************************************************
===========================fix step=================================
我们对原数组进行排序，然后开始遍历排序后的数组，这里注意不是遍历到最后一个停止，
而是到倒数第三个就可以了。

这里我们可以先做个剪枝优化，就是当遍历到正数的时候就break，
为啥呢，因为我们的数组现在是有序的了，如果第一个要fix的数就是正数了，
那么后面的数字就都是正数，就永远不会出现和为0的情况了。

然后我们还要加上重复就跳过的处理，处理方法是从第二个数开始，
如果和前面的数字相等，就跳过，因为我们不想把相同的数字fix两次。
====================================================================
============================left & right idx========================
对于遍历到的数，用0减去这个fix的数得到一个target，
然后只需要再之后找到两个数之和等于target即可。
我们用两个指针分别指向fix数字之后开始的数组首尾两个数，
如果两个数和正好为target，则将这两个数和fix的数一起存入结果中。
然后就是跳过重复数字的步骤了，两个指针都需要检测重复数字。

如果两数之和小于target，则我们将左边那个指针i右移一位，
使得指向的数字增大一些。
同理，如果两数之和大于target，则我们将右边那个指针j左移一位，使得指向的数字减小一些。


补充：C#  泛型接口IList<T> 它的派生类List<T>
=====================================================================

*/
public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        
        /*要注意 result的初始化 
        C#  泛型接口IList<T> 它的派生类List<T>
        此函数返回值是接口类型，所以里面肯定是获得List<T> 对象，返回的时候进行了类型向上提升即儿子装爹
        接口类型是不能实例化的，所以不要new IList<>
        new List<IList<int>>是表示 实例化List类型，里面的类型是IList接口类型
        */
        var result = new List<IList<int>>();
        
        Array.Sort(nums);
        
        for(int i=0; i<nums.Length; i++){
            
            if(nums[i] > 0) break;
            
            if(i > 0 && nums[i] == nums[i-1]) continue;
            
            int target = 0 - nums[i];
            int left = i+1;
            int right = nums.Length-1;
            
            while(left < right){
                if(nums[left] + nums[right] == target){
                    //int[] part = {nums[i],nums[left],nums[right]};
                    //List<int> partResult = new List<int>(part);
                    //new List<int>{nums[i],nums[left],nums[right]};
                    result.Add(new List<int>{nums[i],nums[left],nums[right]});
                    //重要左右指针检测是否重复，如果重复各自自增自减
                    while(left < right && nums[left] == nums[left+1]) left++;
                    while(left < right && nums[right] == nums[right-1]) right--;
                    right--;
                    left++;
                }else if(nums[left] + nums[right] > target){
                    right--;
                }else{
                    left++;
                }
            }
            
        }
        return result;
    }
}
